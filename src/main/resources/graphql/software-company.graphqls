input SoftwareCompanyInput {
    id: ID!,
    name: String,
    companyWorth: Float,
    numberOfEmployees: Int,
    dateFounded: String,
    companyHistory: String
    products: [ProductInput]
}

type SoftwareCompany {
    id: ID!,
    name: String,
    companyWorth: Float,
    numberOfEmployees: Int,
    dateFounded: String,
    companyHistory: String
    products: [Product!]!
}
scalar Date

type Employee {
    id: ID!,
    firstName: String,
    lastName: String,
    function: String,
    dateOfBirth: Date,
    annualSalary: Float,
    seniority: String
}


input ProductInput {
    type: ProductType,
    name: String,
    specs: String
}

type Product {
    id: ID!,
    type: ProductType,
    name: String,
    specs: String
}

enum ProductType {
    Software,
    Hardware
}

interface Department {
    id: ID!
    name: String!
}

type CarDepartment implements Department {
    id: ID!
    name: String!
}

type BusDepartment implements Department {
    id: ID!
    name: String!
}

type Query {
    softwareCompanies(count: Int):[SoftwareCompany]
    softwareCompany(name: String):SoftwareCompany
    employee(firstName: String):[Employee]
}

type Mutation {
    createSoftwareCompany(
        name: String!,
        companyWorth: Float!,
        numberOfEmployees: Int!,
        dateFounded: String!,
        companyHistory: String
        products: [ProductInput]):SoftwareCompany
    createEmployee(
        firstName: String,
        lastName: String,
        function: String,
        annualSalary: Float,
        seniority: Int
        dateOfBirth:Date):Employee
}

